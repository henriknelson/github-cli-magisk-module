.nh
.TH "gh" "1" "Mar 2021" "" ""

.SH NAME
.PP
gh\-api \- Make an authenticated GitHub API request


.SH SYNOPSIS
.PP
\fBgh api  [flags]\fP


.SH DESCRIPTION
.PP
Makes an authenticated HTTP request to the GitHub API and prints the response.

.PP
The endpoint argument should either be a path of a GitHub API v3 endpoint, or
"graphql" to access the GitHub API v4.

.PP
Placeholder values ":owner", ":repo", and ":branch" in the endpoint argument will
get replaced with values from the repository of the current directory.

.PP
The default HTTP request method is "GET" normally and "POST" if any parameters
were added. Override the method with \fB\fC\-\-method\fR\&.

.PP
Pass one or more \fB\fC\-\-raw\-field\fR values in "key=value" format to add
JSON\-encoded string parameters to the POST body.

.PP
The \fB\fC\-\-field\fR flag behaves like \fB\fC\-\-raw\-field\fR with magic type conversion based
on the format of the value:

.RS
.IP \(bu 2
literal values "true", "false", "null", and integer numbers get converted to
appropriate JSON types;
.IP \(bu 2
placeholder values ":owner", ":repo", and ":branch" get populated with values
from the repository of the current directory;
.IP \(bu 2
if the value starts with "@", the rest of the value is interpreted as a
filename to read the value from. Pass "\-" to read from standard input.

.RE

.PP
For GraphQL requests, all fields other than "query" and "operationName" are
interpreted as GraphQL variables.

.PP
Raw request body may be passed from the outside via a file specified by \fB\fC\-\-input\fR\&.
Pass "\-\&" to read from standard input. In this mode, parameters specified via
\fB\fC\-\-field\fR flags are serialized into URL query parameters.

.PP
In \fB\fC\-\-paginate\fR mode, all pages of results will sequentially be requested until
there are no more pages of results. For GraphQL requests, this requires that the
original query accepts an \fB\fC$endCursor: String\fR variable and that it fetches the
\fB\fCpageInfo{ hasNextPage, endCursor }\fR set of fields from a collection.

.PP
The \fB\fC\-\-jq\fR option accepts a query in jq syntax and will print only the resulting
values that match the query. This is equivalent to piping the output to \fB\fCjq \-r\fR,
but does not require the jq utility to be installed on the system. To learn more
about the query syntax, see: https://stedolan.github.io/jq/manual/v1.6/

.PP
With \fB\fC\-\-template\fR, the provided Go template is rendered using the JSON data as input.
For the syntax of Go templates, see: https://golang.org/pkg/text/template/

.PP
The following functions are available in templates:
\- \fB\fCcolor <style>, <input>\fR: colorize input using https://github.com/mgutz/ansi
\- \fB\fCautocolor\fR: like \fB\fCcolor\fR, but only emits color to terminals
\- \fB\fCtimefmt <format> <time>\fR: formats a timestamp using Go's Time.Format function
\- \fB\fCtimeago <time>\fR: renders a timestamp as relative to now
\- \fB\fCpluck <field> <list>\fR: collects values of a field from all items in the input
\- \fB\fCjoin <sep> <list>\fR: joins values in the list using a separator


.SH OPTIONS
.PP
\fB\-\-cache\fP=0s
	Cache the response, e.g. "3600s", "60m", "1h"

.PP
\fB\-F\fP, \fB\-\-field\fP=[]
	Add a typed parameter in \fB\fCkey=value\fR format

.PP
\fB\-H\fP, \fB\-\-header\fP=[]
	Add a HTTP request header in \fB\fCkey:value\fR format

.PP
\fB\-\-hostname\fP=""
	The GitHub hostname for the request (default "github.com")

.PP
\fB\-i\fP, \fB\-\-include\fP[=false]
	Include HTTP response headers in the output

.PP
\fB\-\-input\fP=""
	The \fB\fCfile\fR to use as body for the HTTP request

.PP
\fB\-q\fP, \fB\-\-jq\fP=""
	Query to select values from the response using jq syntax

.PP
\fB\-X\fP, \fB\-\-method\fP="GET"
	The HTTP method for the request

.PP
\fB\-\-paginate\fP[=false]
	Make additional HTTP requests to fetch all pages of results

.PP
\fB\-p\fP, \fB\-\-preview\fP=[]
	Opt into GitHub API previews

.PP
\fB\-f\fP, \fB\-\-raw\-field\fP=[]
	Add a string parameter in \fB\fCkey=value\fR format

.PP
\fB\-\-silent\fP[=false]
	Do not print the response body

.PP
\fB\-t\fP, \fB\-\-template\fP=""
	Format the response using a Go template


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB\-\-help\fP[=false]
	Show help for command


.SH EXAMPLE
.PP
.RS

.nf
# list releases in the current repository
$ gh api repos/:owner/:repo/releases

# post an issue comment
$ gh api repos/:owner/:repo/issues/123/comments \-f body='Hi from CLI'

# add parameters to a GET request
$ gh api \-X GET search/issues \-f q='repo:cli/cli is:open remote'

# set a custom HTTP header
$ gh api \-H 'Accept: application/vnd.github.v3.raw+json' ...

# opt into GitHub API previews
$ gh api \-\-preview baptiste,nebula ...

# print only specific fields from the response
$ gh api repos/:owner/:repo/issues \-\-filter '.[].title'

# use a template for the output
$ gh api repos/:owner/:repo/issues \-\-template \\
  '{{range .}}{{.title}} ({{.labels | pluck "name" | join ", " | color "yellow"}}){{"\\n"}}{{end}}'

# list releases with GraphQL
$ gh api graphql \-F owner=':owner' \-F name=':repo' \-f query='
  query($name: String!, $owner: String!) {
    repository(owner: $owner, name: $name) {
      releases(last: 3) {
        nodes { tagName }
      }
    }
  }
'

# list all repositories for a user
$ gh api graphql \-\-paginate \-f query='
  query($endCursor: String) {
    viewer {
      repositories(first: 100, after: $endCursor) {
        nodes { nameWithOwner }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  }
'


.fi
.RE


.SH SEE ALSO
.PP
\fBgh(1)\fP
